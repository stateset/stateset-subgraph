// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }

  get denom(): string | null {
    let value = this.get("denom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set denom(value: string | null) {
    if (!value) {
      this.unset("denom");
    } else {
      this.set("denom", Value.fromString(<string>value));
    }
  }
}

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Block must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Block", id.toString(), this);
    }
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): BigInt | null {
    let value = this.get("number");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set number(value: BigInt | null) {
    if (!value) {
      this.unset("number");
    } else {
      this.set("number", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }

  get validator(): string | null {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validator(value: string | null) {
    if (!value) {
      this.unset("validator");
    } else {
      this.set("validator", Value.fromString(<string>value));
    }
  }
}

export class Delegation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Delegation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Delegation", id.toString(), this);
    }
  }

  static load(id: string): Delegation | null {
    return changetype<Delegation | null>(store.get("Delegation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatorAddress(): string | null {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegatorAddress(value: string | null) {
    if (!value) {
      this.unset("delegatorAddress");
    } else {
      this.set("delegatorAddress", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): string | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddress(value: string | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }
}

export class Coin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Coin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Coin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Coin", id.toString(), this);
    }
  }

  static load(id: string): Coin | null {
    return changetype<Coin | null>(store.get("Coin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get denom(): string | null {
    let value = this.get("denom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set denom(value: string | null) {
    if (!value) {
      this.unset("denom");
    } else {
      this.set("denom", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }
}

export class Agreement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Agreement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Agreement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Agreement", id.toString(), this);
    }
  }

  static load(id: string): Agreement | null {
    return changetype<Agreement | null>(store.get("Agreement", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get did(): string | null {
    let value = this.get("did");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set did(value: string | null) {
    if (!value) {
      this.unset("did");
    } else {
      this.set("did", Value.fromString(<string>value));
    }
  }
}

export class PurchaseOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PurchaseOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PurchaseOrder must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PurchaseOrder", id.toString(), this);
    }
  }

  static load(id: string): PurchaseOrder | null {
    return changetype<PurchaseOrder | null>(store.get("PurchaseOrder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get did(): string | null {
    let value = this.get("did");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set did(value: string | null) {
    if (!value) {
      this.unset("did");
    } else {
      this.set("did", Value.fromString(<string>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }

  get state(): string | null {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set state(value: string | null) {
    if (!value) {
      this.unset("state");
    } else {
      this.set("state", Value.fromString(<string>value));
    }
  }

  get purchaser(): string | null {
    let value = this.get("purchaser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set purchaser(value: string | null) {
    if (!value) {
      this.unset("purchaser");
    } else {
      this.set("purchaser", Value.fromString(<string>value));
    }
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(<string>value));
    }
  }

  get financer(): string | null {
    let value = this.get("financer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set financer(value: string | null) {
    if (!value) {
      this.unset("financer");
    } else {
      this.set("financer", Value.fromString(<string>value));
    }
  }
}

export class Invoice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Invoice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Invoice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Invoice", id.toString(), this);
    }
  }

  static load(id: string): Invoice | null {
    return changetype<Invoice | null>(store.get("Invoice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get did(): string | null {
    let value = this.get("did");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set did(value: string | null) {
    if (!value) {
      this.unset("did");
    } else {
      this.set("did", Value.fromString(<string>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }

  get state(): string | null {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set state(value: string | null) {
    if (!value) {
      this.unset("state");
    } else {
      this.set("state", Value.fromString(<string>value));
    }
  }

  get purchaser(): string | null {
    let value = this.get("purchaser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set purchaser(value: string | null) {
    if (!value) {
      this.unset("purchaser");
    } else {
      this.set("purchaser", Value.fromString(<string>value));
    }
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(<string>value));
    }
  }

  get factor(): string | null {
    let value = this.get("factor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set factor(value: string | null) {
    if (!value) {
      this.unset("factor");
    } else {
      this.set("factor", Value.fromString(<string>value));
    }
  }
}

export class Loan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Loan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Loan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Loan", id.toString(), this);
    }
  }

  static load(id: string): Loan | null {
    return changetype<Loan | null>(store.get("Loan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }

  get fee(): string | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fee(value: string | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromString(<string>value));
    }
  }

  get collateral(): string | null {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collateral(value: string | null) {
    if (!value) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromString(<string>value));
    }
  }

  get deadline(): string | null {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deadline(value: string | null) {
    if (!value) {
      this.unset("deadline");
    } else {
      this.set("deadline", Value.fromString(<string>value));
    }
  }

  get state(): string | null {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set state(value: string | null) {
    if (!value) {
      this.unset("state");
    } else {
      this.set("state", Value.fromString(<string>value));
    }
  }

  get borrower(): string | null {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set borrower(value: string | null) {
    if (!value) {
      this.unset("borrower");
    } else {
      this.set("borrower", Value.fromString(<string>value));
    }
  }

  get lender(): string | null {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lender(value: string | null) {
    if (!value) {
      this.unset("lender");
    } else {
      this.set("lender", Value.fromString(<string>value));
    }
  }
}
